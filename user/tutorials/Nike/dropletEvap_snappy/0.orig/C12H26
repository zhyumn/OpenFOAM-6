/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0.00015";
    object      C12H26;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions [0 0 0 0 0 0 0];

internalField   #codeStream
{
    
        codeInclude
        #{
            #include "fvCFD.H"
        #};
        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};  
        codeLibs
        #{
            -lmeshTools \
            -lfiniteVolume
        #};
        code
        #{
            const IOdictionary & d = static_cast<const IOdictionary&>(dict);
            const fvMesh& mesh = refCast<const fvMesh>(d.db());

            double r = 5e-6;
            double x_center = 50e-6;
            double y_center = 50e-6;
            double thickness = 10e-6/15;
            double omega = 0.01*10e-6;
            double Clow = 0.001;
            double Chigh = 0.999;

            scalarField C12H26(mesh.nCells(), Clow);
            forAll(C12H26, i)
            {
                const scalar x = mesh.C()[i][0];
                const scalar y = mesh.C()[i][1];
                //const scalar z = mesh.C()[i][2];
                scalar r_tmp=sqrt(sqr(y - y_center)+sqr(x-x_center));
                if (r_tmp < r-thickness/2)
                {
                    C12H26[i] = Chigh;
                }
                else if (r_tmp < r+thickness/2)
                {
                    C12H26[i] = 0.5*(Clow+Chigh)+0.5*(Clow-Chigh)*tanh((r_tmp-r)/omega);
                }
            }
            C12H26.writeEntry( "", os);
        #};
    
};

boundaryField
{
    wall
    {
        type            empty;
    }
    top
    {
        type            fixedValue;
        value           0.001;
    }
    bottom
    {
        type            fixedValue;
        value           0.001;
    }
    inlet
    {
        type            fixedValue;
        value           0.001;
    }
    outlet
    {
        type            fixedValue;
        value           0.001;
    }
}


// ************************************************************************* //
