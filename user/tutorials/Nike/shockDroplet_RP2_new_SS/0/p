/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      p;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -1 -2 0 0 0 0];

//internalField  uniform 20e6;

internalField  #codeStream
{
    
        codeInclude
        #{
            #include "fvCFD.H"
        #};
        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};  
        codeLibs
        #{
            -lmeshTools \
            -lfiniteVolume
        #};
        code
        #{
            const IOdictionary & d = static_cast<const IOdictionary&>(dict);
            const fvMesh& mesh = refCast<const fvMesh>(d.db());


            double plow=1e+5 ;
            double phigh=50e+5 ; //low P 7.31e5(2.5bar) M1.57, 3.43e5(1.8bar)M1.34 2.8e5(1.64bar) M1.3,high 305e+5(8.3bar),13.5e5(3.18bar) M1.75, 50e5(5bar) M2.17

            scalarField p(mesh.nCells(), plow);
            forAll(p, i)
            {
                const scalar x = mesh.C()[i][0];
                //const scalar y = mesh.C()[i][1];
                //const scalar z = mesh.C()[i][2];
                if (x < 0e-3)
                {
                    p[i] = phigh;
                }
            }
            p.writeEntry( "", os);
        #};
};

boundaryField
{
    wall
    {
        type            empty;
    }
        top
    {
        type            zeroGradient;
    }
    bottom
    {
        type            zeroGradient;
    }
    inlet
    {
        type            waveTransmissiveDF;
    }
    outlet
    {
        type            waveTransmissiveDF;
    }
}


// ************************************************************************* //
