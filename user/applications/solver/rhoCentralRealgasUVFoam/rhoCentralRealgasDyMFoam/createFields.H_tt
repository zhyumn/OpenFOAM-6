#include "createRDeltaT.H"

const word DF_name("DF");
const word Yi_name("Yi");
const word rhoYi_name("rhoYi");

Info<< "Reading thermophysical properties\n" << endl;

autoPtr<rhoReactionThermo> pThermo
(
    rhoReactionThermo::New(mesh)
);
rhoReactionThermo& thermo = pThermo();
basicSpecieMixture &composition = thermo.composition();
PtrList<volScalarField> &Y = composition.Y();
volScalarField &c = mesh.objectRegistry::lookupObjectRef<volScalarField>("soundspeed");
volScalarField& p = thermo.p();
volScalarField& e = thermo.he();

const word inertSpecie(thermo.lookup("inertSpecie"));

//- Creates List of species name
speciesTable species = composition.species();

Info<< "Reading field U\n" << endl;
volVectorField U
(
    IOobject
    (
        "U",
        runTime.timeName(),
        mesh,
        IOobject::MUST_READ,
        IOobject::AUTO_WRITE
    ),
    mesh
);

volScalarField rho
(
    IOobject
    (
        "rho",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::AUTO_WRITE
    ),
    thermo.rho()
);

volVectorField rhoU
(
    IOobject
    (
        "rhoU",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE
    ),
    rho*U
);

PtrList<volScalarField> rhoY(Y.size());
forAll(Y, i)
{
    rhoY.set(
        i,
        new volScalarField(
            IOobject(
                "rhoY." + species[i],
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::NO_WRITE),
            rho * Y[i]));
}

volScalarField rhoE
(
    IOobject
    (
        "rhoE",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE
    ),
    rho*(e + 0.5*magSqr(U))
);

surfaceScalarField pos
(
    IOobject
    (
        "pos",
        runTime.timeName(),
        mesh
    ),
    mesh,
    dimensionedScalar("pos", dimless, 1.0)
);

surfaceScalarField neg
(
    IOobject
    (
        "neg",
        runTime.timeName(),
        mesh
    ),
    mesh,
    dimensionedScalar("neg", dimless, -1.0)
);

surfaceScalarField phi("phi", fvc::flux(rhoU));

Info<< "Creating turbulence model\n" << endl;
autoPtr<compressible::turbulenceModel> turbulence
(
    compressible::turbulenceModel::New
    (
        rho,
        U,
        phi,
        thermo
    )
);


//- Creates Molecular weight field [kg/kmol]
Info << "Creating field molecular weight - W" << endl;
volScalarField Wmix(
    IOobject(
        "Wmix",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ, //IOobject::MUST_READ,
        //IOobject::AUTO_WRITE
        IOobject::NO_WRITE),
    thermo.W());

volScalarField gammaStar(
    IOobject(
        "gammaStar",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE),
    rho *c *c / p);

volScalarField eStar(
    IOobject(
        "eStar",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE),
    e - p / (rho * (gammaStar - 1)));


UPtrList<volScalarField> Dimix_t(species.size());
forAll(species, i)
{
    Dimix_t.set(i, &mesh.objectRegistry::lookupObjectRef<volScalarField>("thermo:Dimix:" + species[i]));
}
Info << "\nCreating field mass diffusivity Dimix_i" << endl;
PtrList<volScalarField> Dimix(Y.size());
forAll(Dimix, i)
{
    Dimix.set(
        i,
        new volScalarField(
            IOobject(
                "Dimix_" + species[i],
                runTime.timeName(),
                mesh,
                IOobject::NO_READ, //IOobject::MUST_READ,
                IOobject::NO_WRITE
                //IOobject::AUTO_WRITE
                ),
            Dimix_t[i]));
}

PtrList<volVectorField> YVi(Y.size());
forAll(YVi, i)
{
    YVi.set(
        i,
        new volVectorField(
            IOobject(
                "YVi_" + species[i],
                runTime.timeName(),
                mesh,
                IOobject::NO_READ, //IOobject::MUST_READ,
                IOobject::NO_WRITE),
            mesh,
            dimensionedVector("YVi_" + species[i], dimensionSet(0, 1, -1, 0, 0), vector(0., 0., 0.))));
}

// correction terms for diffusion velocity
volScalarField sumDiffusionCorrections1(
    IOobject(
        "gas_sumCorrections1",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE),
    mesh,
    dimensionedScalar("zero", dimensionSet(1, -3, -1, 0, 0), 0.));

volScalarField sumDiffusionCorrections2(
    IOobject(
        "gas_sumCorrections2",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::NO_WRITE),
    mesh,
    dimensionedScalar("zero", dimensionSet(1, -3, -1, 0, 0), 0.));